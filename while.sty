%% 
%%  A pointles set of macros for the while language.
%%

\usepackage{amsmath}
\usepackage{stmaryrd}



%Adds a protect ... end around a statement.
\newcommand{\wProtect}[1]{%
    \mathtt{protect} \  {#1} \  \mathtt{end} \ 
}

%Adds a protected ... end around a statement. 
\newcommand{\wProtected}[1]{%
    \mathtt{protected} \  {#1} \  \mathtt{end} \ 
}

\newcommand{\wPar}[2]{%
  {#1} \  \mathtt{par} \  {#2} \ 
}

\newcommand{\wIfElse}[3]{%
    \mathtt{if} \  {#1} \  \mathtt{then} \  {#2} \  \mathtt{else} \  {#3} \ 
}

\newcommand{\wIf}[2]{%
    \mathtt{if} \  {#1} \  \mathtt{then} \  {#2} \ 
}

\newcommand{\wWhile}[2]{%
	  \mathtt{while} \  {#1} \  \mathtt{do} \  {#2} \ 
}

\newcommand{\wProc}[2]{%
    \mathtt{proc} \  {#1} \  \mathtt{is} \  {#2} \ 
}
  
%%Creates the asignment thing like so; \Assign{x}{a}{s} = s[x |-> A[[a]]s]
\newcommand{\wAssign}[3]{%
    {#3}[{#1} \mapsto \mathcal{A}\llbracket {#2} \rrbracket {#3}]
}

%Simple shorthand for the semantic arithmetic functions. Saves a lot of space.
\newcommand{\wA}[1]{%
	\mathcal{A}\llbracket {#1} \rrbracket
}

%Sweet thing for rules first argument is the name and the second argument is the
% case. Leave the second argument blank for rules with only one case :)
\newcommand{\wRns}[2]{%
	[\mathrm{{#1}_{ns}^{{#2}}}]
}
 





